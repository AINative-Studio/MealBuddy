version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: mealbuddy-db-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-mealbuddy_prod}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    restart: unless-stopped
    networks:
      - mealbuddy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: mealbuddy-backend-prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-mealbuddy_prod}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    networks:
      - mealbuddy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: mealbuddy-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - mealbuddy-network
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}

  nginx:
    image: nginx:alpine
    container_name: mealbuddy-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/letsencrypt
      - ./certs:/etc/ssl/certs
    depends_on:
      - backend
      - frontend
    networks:
      - mealbuddy-network

networks:
  mealbuddy-network:
    driver: bridge

volumes:
  postgres_data_prod:
